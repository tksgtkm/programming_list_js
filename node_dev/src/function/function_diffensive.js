/* メソッド呼び出し */

/*
メソッドとはオブジェクトのプロパティに保存されたJavaScript関数のこと。
関数fとオブジェクトoがある場合に

o.m = f;

のようにoのメソッドmが定義できる。

オブジェクトoのメソッドm()を定義したあと、

o.m()　のように呼び出す。

引数は　o.m(x, y) のように渡す。

メソッド呼び出しの引数や戻り値は、関数呼び出しとおなじであるが、
メソッド呼び出しは他に呼び出しコンテキストというものがある。

プロパティアクセス式はオブジェクト(o)とプロパティ(m)の2つから構成される。

オブジェクトoが呼び出しコンテキストになり、関数本体からはthisキーワードを使って
このオブジェクトoを参照できる。
 */

// オブジェクトリテラル
let calculator = {
    operand1: 1,
    operand2: 1,
    // 簡略記法を使って関数を定義する。
    add() {
        // thisキーワードを使ってこのオブジェクトを参照している。
        this.result = this.operand1 + this.operand2;
    }
};

// メソッドを呼び出して1+1を計算する。
console.log(calculator.add());
// 2
console.log(calculator.result);

/*
thisはキーワードであり、変数名やプロパティ名ではない。
そのためthisに値は代入できない。

変数とは異なりthisキーワードにはスコープがない。
アロー関数以外の入れ子型の関数は外側のthisの値を継承しない。

入れ子型の関数がメソッドとして呼び出された場合、
関数を呼び出したオブジェクトがthisの値になる。
入れ子型の関数(アロー関数以外)が関数として呼び出された場合はthisの値は
非strictモードのときはブローバルオブジェクトになり、strictモードのときは
undefinedになる。
 */

// オブジェクトo
let o = {
    // オブジェクトのメソッドm
    m: function() {
        // thisの値を変数に保存する。
        let self = this;
        // => true: thisはオブジェクトo
        this === o;
        // 関数f()はここで呼び出す。
        f();

        // 入れ子型の関数f
        function f() {
            // false: thisはグローバルまたはundfined
            this === o
            // true: selfは外側の関数のthisの値
            self === o
        }
    }
};

// オブジェクトのメソッドmを呼び出す
console.log(o.m());